#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrbook
\begin_preamble
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhead{}
\fancyfoot{}
\fancyfoot[C]{\thepage}
%\fancyhead[LE,RO]{\slshape bischeck Readme}
\fancyhead[LE,RO]{bischeck - A business activity check command server for Nagios}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}
%\lhead{bischeck}
%\rhead{Text you want on the right top}
%\chead{Text you want over the center}
%\lfoot{left footer}
%\rfoot{right footer}
%\cfoot{\thepage}

% \lhead{\nouppercase{\rightmark} (\nouppercase{\leftmark})}
% \lhead{\nouppercase{\leftmark}}  
% \chead{}
%   \rhead{}
%   \lfoot{2011}
%   \cfoot{bischeck}
%   \rfoot{\thepage}
%   \renewcommand{\headrulewidth}{0.4pt}
%   \renewcommand{\footrulewidth}{0.4pt}

%  \renewcommand{\chaptermark}[1]{%
 % \markboth{#1}{}}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
bischeck 
\begin_inset Newline newline
\end_inset

-
\begin_inset Newline newline
\end_inset

A Business Activity Monitoring Server 
\end_layout

\begin_layout Date
Version 0.4.0 RC1 (alpha)
\begin_inset Newline newline
\end_inset

2012-05-06
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:Introduction"

\end_inset

Introduction 
\end_layout

\begin_layout Standard
Monitoring and surveillance is today common in any IT operation.
 The market is mature and a number of excellent solutions exists, especially
 in the open source market, like Nagios.
 But when it comes to monitoring of business applications the maturity is
 not on the same level.
 Business operations teams seldom has any monitoring solution to understand
 what goes on in their business processes and applications.
 Business intelligence solutions can often tell what happened last month
 but from a more tactical operations view there is a gap.
 So why do not business operations team implement the same surveillance
 structure or use the existing IT operations infrastructure to understand
 
\emph on

\begin_inset Quotes eld
\end_inset

why number of orders have dropped under the current threshold
\begin_inset Quotes erd
\end_inset


\emph default
?
\end_layout

\begin_layout Standard
So what is the difference between business activity monitoring, BAM, and
 traditional IT infrastructure monitoring? Basically its the same, some
 entity to measure and for that entity define thresholds levels that will
 generate warning or critical alarms.
 The demands we have seen in addition to the basic functionality are the
 following features provided by bischeck:
\end_layout

\begin_layout Itemize
Enable a dynamic configuration of threshold values depending of time of
 the day and day of month or week.
\end_layout

\begin_layout Itemize
Support threshold based on fixed values and thresholds based on the measured
 value from other services.
 This it typical in process driven businesses.
 
\end_layout

\begin_layout Itemize
Support multiple scheduling schema per service.
 This enable a fine grain control of when a service should be run.
 The configuration is based on a similar structure as UNIX cron.
\end_layout

\begin_layout Itemize
Configure services that are based on multiple measured values of other services,
 what could be described as "virtual" entities.
 
\end_layout

\begin_layout Itemize
Support date macros in the execution statements of a service, typical used
 in a 
\emph on
where
\emph default
 clause when selecting from databases.
\end_layout

\begin_layout Itemize
Support a multitude of ways to connected to the source system by allowing
 custom developed service connection methods.
\end_layout

\begin_layout Itemize
Support for custom threshold classes to enable any way to define threshold
 logic.
 
\end_layout

\begin_layout Itemize
Integrates with multiple monitoring and surveillance tools, like any Nagios
 like systems that supports the NSCA protocol
\begin_inset Foot
status open

\begin_layout Plain Layout
Nagios Core, Nagios XI, Icinga, OP5 Monitor, Shinken, Opsview, Centreon,
 etc.
\end_layout

\end_inset

, OpenTSDB and more.
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
[New in 0.4.0]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lets look at 3 examples that would be solved by using bischeck: 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
Example 1 – Monitor the number of orders received during the day 
\end_layout

\begin_layout Standard
The order management application receive orders 24 hours a day during Monday
 to Friday.
 The total aggregated number of orders are different depending on time of
 the day.
 The business expect to have a total numbers of orders of 1500 at 13:00,
 at 14:00 the order count should be 2300, at 15:00 it should be 3400, etc.
 Between every hour the business want to interpolate that the order rate
 are according to a linear equation between the defined hour rates.
 This means that the threshold at 13:20 is (2300-1500)*20/60+1500 = 1767.
 The warning alarm level should be between 90% and 70% of the threshold
 and critical alarm if the measured value is below 70% of the threshold.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
Example 2 – Monitor the number of created invoices in relation to the number
 of received orders
\end_layout

\begin_layout Standard
The invoice system should invoice at lest 80% of the daily incoming orders
 in the same day with one hour delay.
 This means that the measured value of orders with one hour delay must be
 used as a threshold for the number of created invoices.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
Example 3 – Monitor the current number of orders and if the inflow is zero
 we need an alarm
\series default
 
\end_layout

\begin_layout Standard
The order system have a table with all received orders, but the requirement
 is that we need to monitor how many that has been received during the last
 10 minutes.
 If this value is zero an alarm must be generated since its an indication
 that the sales system are not generating orders.
 To achieve this monitoring we use the last and the previous sample of the
 total number of orders from example 1 and create the difference between
 the two to get a new virtual entity to measure, with an threshold level
 of 0.
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Hopefully these examples have convinced you that with bischeck you can do
 complex application monitoring by advanced threshold management and processes
 dependencies.
 And this can be done by just integrate it with your existing IT surveillance
 infrastructure.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename overview.svg
	width 16cm

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Architecture overview
\end_layout

\end_inset


\end_layout

\end_inset

The bischeck architecture include the following main components:
\end_layout

\begin_layout Itemize
Configuration - Manage all configuration of bischeck
\end_layout

\begin_layout Itemize
Scheduling - Controls the execution time of each service
\end_layout

\begin_layout Itemize
Connection - Manage connection management against the source systems to
 monitor
\end_layout

\begin_layout Itemize
Threshold - Manage the threshold configuration and processing
\end_layout

\begin_layout Itemize
Cache - Storage of all values that has been collected from the source systems
\end_layout

\begin_layout Itemize
Server integration - Manage integration and formatting to the different
 monitoring systems
\end_layout

\begin_layout Standard
bischeck is open source and licensed under GPL version 2.
 bischeck is written in Java and runs as a stand-alone daemon and integrates
 with different monitoring and surveillance tools over open protocols.
 If you have ideas to new features, find bugs, etc please visit 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://gforge.ingby.com/gf/project/bischeck/
\end_layout

\end_inset

 where you can fill in bug reports and feature requests.
 You can also email anders.haal@ingby.com.
 We look forward to your feedback.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:Service-configuration"

\end_inset

Service configuration 
\end_layout

\begin_layout Standard
The design of bischeck is based on the concept of configuring hosts, services
 and service items.
 As an example we have host 
\emph on
erpserver
\emph default
 and we define a service called 
\emph on
orders
\emph default
.
 For the 
\emph on
order
\emph default
 service we can have multiple service items, defined like 
\emph on
ediOrders
\emph default
 and 
\emph on
mailOrders
\emph default
.
 The service define a connection url to connect to the entity to measure
 and the service items define the statement to be executed to retrieve the
 entity value.
 The service url is used by bischeck to instantiate the right service class
 to manage the the connection.
 For example if the url has a schema part that is jdbc, the JDBCService
 class is used.
 The mapping between the service url and the class to use is configurable.
 Each service class must implement the Service interface.
 The execution statement described for the service item must only return
 one single value.
 A service item class must implement the interface Serviceitem.
 The host can av multiple service, and each service can have multiple service
 items.
\begin_inset Newline newline
\end_inset

All host, service and service items are described in xml configuration files
 located in the 
\emph on
etc
\emph default
 directory of the installation,
\emph on
 $BISHOME
\emph default
.
 For more information about services and service items classes please section
\begin_inset CommandInset ref
LatexCommand ref
reference "label:Services-and-service"

\end_inset

.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:Services-and-service"

\end_inset

Services and service items classes
\end_layout

\begin_layout Standard
The key configuration objects in bischeck are the service and service item.
 The service key attributes are the service name, the schedules when to
 execute the service and the url that define the connection used by the
 service item.
 
\end_layout

\begin_layout Standard
The service item key attributes are the execute statement that define what
 should be executed to retrieve the measured entity and the threshold class
 used to process the measured entity to validate the state of the measured
 entity.
 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "label:Service-classes"

\end_inset

Service classes 
\end_layout

\begin_layout Standard
The following Service classes is provided in the standard bischeck distribution.
\end_layout

\begin_layout Subsection
JDBC
\end_layout

\begin_layout Standard
JDBCService manage services connecting to databases over JDBC.
 JDBC driver jars should be put in the directory 
\emph on
customlib
\emph default
 in the bischeck install directory to automatically be found at start-up.
\end_layout

\begin_layout Subsection
Livestatus
\end_layout

\begin_layout Standard
LivestatusService enable connectivity to any Nagios server supporting MK
 Livestatus
\begin_inset Foot
status open

\begin_layout Plain Layout
More information on MK Livestatus can be found on 
\begin_inset CommandInset href
LatexCommand href
name "http://mathias-kettner.de/checkmk_livestatus.html"
target "http://mathias-kettner.de/checkmk_livestatus.html"

\end_inset


\end_layout

\end_inset

.
 With this service both the service state and performance data can be retrieved
 from a Nagios server.
 
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
[New in 0.4.0]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Bischeck cache
\end_layout

\begin_layout Standard
LastCacheService enable connection to bischeck's internal cache where the
 measured data is stored.
 With the service any existing host->service->serviceitem can be retrieved
 from the cache.
 This can typical be used to create new virtual services based on mathematical
 expression for combination of cache entities.
 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "label:Service-item-classes"

\end_inset

Service item classes
\end_layout

\begin_layout Standard
The following ServiceItem classes is provided in the standard bischeck distribut
ion.
\end_layout

\begin_layout Subsection
SQL
\end_layout

\begin_layout Standard
SQLServiceItem enables execution of a SQL statements.
 Its important that the SQL statement only return one single number value,
 like a "
\emph on
select count(*) ....
\emph default
" or 
\begin_inset Quotes eld
\end_inset


\emph on
select sum(orderValue) from ....
\emph default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Livestatus 
\end_layout

\begin_layout Standard
With the Livestatus service item both state and performance data can be
 queried from a Nagios server.
 The query is formatted as a json structure.
 To query a specific Nagios service state the following statement example
 can be used:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

{"host":"linux-server1","service":"DNS","query":"state"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The above will query the current Nagios state of service 
\emph on
DNS
\emph default
 for host 
\emph on
linux-server1
\emph default
.
 
\end_layout

\begin_layout Standard
To query the the performance data for the Nagios service 
\emph on
HTTP
\emph default
 just change the query key value to perfdata and add the label key so the
 right label in a multi value performance data is retrieved:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

{"host":"linux-server1","service":"HTTP","query":"perfdata","label":"size"}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Cache calculations
\end_layout

\begin_layout Standard
CalculateOnCache enable statement execution using measured values residing
 in the bischeck internal cache.
 Mathematical statements according to jep expressions capability is possible
 like:
\begin_inset Newline newline
\end_inset

 
\begin_inset listings
lstparams "breaklines=true,tabsize=4"
inline false
status open

\begin_layout Plain Layout

if((erpserver-orders-ediOrders[0] - erpserver-orders-ediOrders[1]) < 0,0,
 erpserver-orders-ediOrders[0] - erpserver-orders-ediOrders[1])
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The above example check if the result of "erpserver-orders-ediOrders[0]
\emph on
 - 
\emph default
erpserver-orders-ediOrders[1]" is less then 0.
 If true, return 0 and if false return the result of "erpserver-orders-ediOrders
[0]
\emph on
 - 
\emph default
erpserver-orders-ediOrders[1]".
 The value to use from the cache is defined by an index [X], where 0 is
 the latest value retrieved for the specific host-service-item.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:Date-formatting"

\end_inset

Date formatting
\end_layout

\begin_layout Standard
Many service items will typically execute something depending on a date.
 For this reason bischeck supports date macros in the execute statement
 for service items.
 For example, if this is a SQL select statement that using a date condition,
 the formatting could be done like this:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

select count(orders) from order where 
\end_layout

\begin_layout Plain Layout

fromdate='%%yyyy-MM-dd%%' and 
\end_layout

\begin_layout Plain Layout

todate='%%yy.MM.dd%[D2]%%'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
bischeck will replace anything between %% and %% with the current date according
 to the format string.
 The formatting follows the structure of the Java SimpleDateFormatter class.
 If the format string includes a %[] macro, the current date will be calculated,
 where Y means year, M means month and D means day.
 So %[D-1] means subtract one day from the current date and %[M2] means
 add two months to the current date.
 A construction like D-1Y-1 is not supported.
 
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:Service-item-cache"

\end_inset

Service item cache - LastStatusCache
\end_layout

\begin_layout Standard
bischeck keeps a none persistent cache of the measured service items.
 For each service item the last 100 measured values are kept in the cache
 in a LRU list.
 To retrieve a specific service item from the cache the following format
 is used, 
\emph on
host-service-item[index]
\emph default
 where index is the lru entry, with 0 specifying that last retrieved measured
 value , e.g.
 
\emph on
erpserver-orders-ediOrders[0]
\emph default
.
 The cache content can be used in the specification of execute statements
 of service items and in specification in threshold classes, see section
 
\begin_inset CommandInset ref
LatexCommand vref
reference "label:Twenty4HourThreshold-class"

\end_inset

.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:Threshold-configuration"

\end_inset

Threshold configuration
\end_layout

\begin_layout Standard
To define the state of the retrieved service items value a threshold class
 is specified for each service item.
 The threshold class evaluate the measured value with some logic and return
 the state as okay, warning or critical level.
 The threshold instance for the specific service item is stored in a threshold
 cache and valid for a period of a day.
 Every new day the threshold cache is invalidated and bischeck looks for
 new valid threshold classes to instantiate for the service item to be used
 for the period of a day.
 The reason that the period is set to a day is that there may be a need
 to configure the threshold instance differently depending on the day of
 the week or month.
 
\end_layout

\begin_layout Standard
A valid threshold class must implement the interface Threshold.
 This structure enables a flexible implementation of very different ways
 to calculate or specify a threshold.
 In the simplest form a threshold class could just return a okay independent
 of measured value and in the more complex solution be based on algorithms,
 database content, measured values from other service items, day of month
 or some complex combination.
 
\end_layout

\begin_layout Standard
Warning and critical level specification are also part of the threshold
 class.
 The threshold class are also responsible to define what operations are
 support for the measured value, like measured value should be higher, lower
 or in an interval of the threshold.
 Warning and critical level are always defined as the percentage of the
 threshold.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "label:Twenty4HourThreshold-class"

\end_inset

Twenty4HourThreshold class
\end_layout

\begin_layout Standard
The Twenty4Hour threshold class divides the day into 24 hours.
 For each hour of the day a threshold is defined.
 The two threshold values that are next to each other used to calculate
 a slope of a linear equation between the two closest hours.
 For example, if the threshold value is 1000 at 14:00 and 1600 at 15:00,
 the calculation for a threshold value between 14:00 and 15:00 is y=x*(1600-1000
)/60 + 1000.
 At 14:20 the threshold is 20*(1600-1000)/60+1000 = 1200.
 
\end_layout

\begin_layout Standard
The threshold model gives a linear equation with one hour granularity, but
 over 24 hours it can resemble a curve.
 This behavior is typical in business systems where the key business values
 are distributed in a none linear and none constant way over the period
 of a day, e.g.
 incoming orders.
 
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "label:Period-definition"

\end_inset

Period definition
\end_layout

\begin_layout Standard
Since the threshold for a service item can be different depending on the
 month, day of month, week, day of week the configuration supports thresholds
 to be described on a granularity called period.
 A period include multiple months and weeks definitions as long as they
 share the same threshold definition.
 For a month it is possible to specify a specific month and/or a day of
 a month and for a week a specific week and/or a day of a week.
 To find the right threshold period the the class look for threshold period
 specification in the following order: 
\end_layout

\begin_layout Enumerate
Month and day of month 
\end_layout

\begin_layout Enumerate
Week and day of week 
\end_layout

\begin_layout Enumerate
Day in month 
\end_layout

\begin_layout Enumerate
Day in the week 
\end_layout

\begin_layout Enumerate
Month 
\end_layout

\begin_layout Enumerate
Week 
\end_layout

\begin_layout Enumerate
Default 
\end_layout

\begin_layout Standard
Month is specified between 1-12, week 1-53, day of month 1-31 and day of
 week 1-7 (1=Sunday).
 The default threshold period is used if no other matching occurs.
\end_layout

\begin_layout Standard
Since holidays are often days where the business are not operational there
 is a way to describe days that should no have any threshold checks.
 These exclude days are checked before any other rule above are evaluated.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "label:Calculation-definition"

\end_inset

Calculation definition
\end_layout

\begin_layout Standard
The class support tree ways how the threshold is compered to the measured
 value: 
\end_layout

\begin_layout Description
">" Measured value should be higher then threshold.
 If the measured value is lower then threshold*warning(%) warning state
 is set and if measured value is lower then threshold*critical(%) critical
 state is set.
 
\end_layout

\begin_layout Description
"<" Measured value should be lower then threshold.
 If the measured value is higher then threshold*(1-warning(%)) warning state
 is set and if if measured value is higher then threshold*(1-critical(%))
 critical state is set.
\end_layout

\begin_layout Description
"=" Measured should be in the interval of the threshold.
 If the measured value is lower then threshold*warning(%) OR higher then
 threshold*(1-warning(%)) a warning state is set and if measured value is
 lower then threshold*critical(%) OR higher then threshold*(1-critical(%))
 a critical state is set.
\end_layout

\begin_layout Standard
For complete configuration description see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "label:24thresholds.xml"

\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "label:Hours-definition"

\end_inset

Hours and threshold definition
\end_layout

\begin_layout Standard
The measured value is compered against the threshold value that is calculated
 from linear equation of the two closest threshold values.
 As described in the introduction of this chapter we can set the threshold
 values to fixed number, but in a business system this is not enough.
 Let take an example.
 The number of orders that can be invoiced during a day is probably depending
 on the number of orders received.
 So instead of setting the threshold to a fixed number we can use an expression
 based threshold like 
\begin_inset Quotes eld
\end_inset

80 % of received orders
\begin_inset Quotes erd
\end_inset

.

\emph on
 
\emph default
The syntax of expression based thresholds is simple and powerful.
 Expressions are based on the JEP package, see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "label:System-requirements"

\end_inset

, where the parameters are any measured values that exist in the service
 item cache, see 
\begin_inset CommandInset ref
LatexCommand ref
reference "label:Service-item-cache"

\end_inset

.
 For example the expression 
\emph on
"erpserver-orders-ediorders[0]*0.8"
\emph default
 is the threshold is set to 80% of the last measured value of the service
 item 
\emph on
ediorders
\emph default
 for the service 
\emph on
order
\emph default
 and host 
\emph on
erpserver
\emph default
.
 We could also combine multiple cached values from different sources in
 the same expression like, 
\emph on
"erpserver-orders-ediorders[0] / geoserver-route-finalroute[0]
\begin_inset Quotes erd
\end_inset

 
\emph default
to get some sort of ratio threshold
\emph on
.
\begin_inset Newline newline
\end_inset


\emph default
If we just need to check parts of a day for thresholds, just set the hour
 to NULL and no calculation will be done for that time interval.
 For example if no threshold checks should be done on weekends just define
 period rule number 4 for day 1 and 6 with all hour thresholds set to NULL.
 
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:Server-integration"

\end_inset

Server integration
\end_layout

\begin_layout Standard
Since bischeck support integration with multiple monitoring its not possible
 to define a single message format or protocol.
 For that reason each Server class implementation is responsible for message
 formatting and communication with the integrated server.
 If the server system is not responding the message will be dropped on the
 bischeck side.
 
\end_layout

\begin_layout Section
Nagios integration with NSCA
\end_layout

\begin_layout Standard
The data format between bischeck and Nagios follow the standard NSCA format.
 This means that the Nagios host and service names must be the same as you
 configure in bischeck.
 Since NSCA only works with passive checks the 
\emph on
check_dummy
\emph default
 or equivalent check command should be used on the Nagios side.
 The data is packaged using the methods in jsendnsca.
 For a service in bischeck the data is split in the status and the performance
 output.
 The bischeck status output has the following format: 
\end_layout

\begin_layout Standard
<level> <service item name> = <measured value> (<threshold> <warning value>
 <warning_calc method> <critical value>) <critical calc method> , <service
 item name> = ...
 
\end_layout

\begin_layout Standard
Since a service can have multiple service items, the output is presented
 as a concatenated string of the service items.
 The <measured value> is the value that was retrieved from the execution
 of the specific service item execute statement.
 The <threshold> is the current threshold value that the measured value
 has been compared against.
 The calculated warning and critical levels are also calculated based on
 the percentage value of the threshold.
\end_layout

\begin_layout Standard
Depending of the calculation method the string representation will differ.
 The following methods are support: 
\end_layout

\begin_layout Itemize
Measure value must be higher the threshold: <warning level> = > W > <critical
 level> = > C >
\end_layout

\begin_layout Itemize
Measure value must be lower the threshold: <warning level> = < W < <critical
 level> = < C <
\end_layout

\begin_layout Itemize
Measure value must be in the interval to the threshold: <warning level>
 = = +-W = <critical level> = = +-C =
\end_layout

\begin_layout Standard
Example of the output: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

OK ediOrders = 12000 (11000 > W > 9900 > C > 7700)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this case the threshold value is 11000 and warning and critical levels
 has been set to 10% and 30 % of the current threshold.
 Since the warning and critical level are as a fixed percentage the calculated
 level will changed with the current threshold.
\end_layout

\begin_layout Standard
If there are no threshold values defined for the current period in which
 the measured value is done, the threshold is reported as null and no calculatio
n is done that can be used for notification.
 Null can also be reported as the measured value.
 This can occur if a none or a null value is retrieved for the service item,
 for example from a faulty SQL statement.
 
\end_layout

\begin_layout Standard
Service connection problems will be reported as critical.
 Warning and critical notification will be based on the service item that
 has the highest level of severity if there are more then one service item
 defined for a service.
 If one service item reports critical and the other reports OK the service
 will report critical.
 
\end_layout

\begin_layout Standard
For the performance data, which Nagios graphs, like pnp4nagios, are based
 upon, each service item is included with the addition of the current threshold.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ediOrders=12000;9900;7000;0; threshold=11000;0;0;0; avg-exec-time=223ms
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The execution time of the service execute statement is always part of the
 performance data and reported in milliseconds.
 With the pnp4nagios template that is provided by the bischeck installation
 the average execution time is not graphed.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
The configuration parameters that need to be define in the server.xml for
 OpenTSDB are:
\end_layout

\begin_layout Itemize
hostAddress - the IP or name for the NSCA server, default is localhost.
\end_layout

\begin_layout Itemize
port - the socket port number on the NSCA server where NSCA is listening,
 default is 5667.
\end_layout

\begin_layout Itemize
connectionTimeout - the timeout time in milliseconds before bischeck give
 up on the the connection, default is 5000.
\end_layout

\begin_layout Itemize
encryptionMode - the encryption mode used in the communication with the
 NSCA server, default is XOR.
\end_layout

\begin_layout Itemize
password - the NSCA server password, no default.
\end_layout

\begin_layout Section
OpenTSDB
\end_layout

\begin_layout Standard
OpenTSDB is an monitoring system that provide storage and indexing of high
 volume of time series data.
 Access to the data in through a graphical web console provide easy way
 to view many different data sources for advanced analysis.
 The OpenTSDB integration is provided over OpenTSDB text based protocol.
 From bischeck the format will be the following for put host erpserver,
 service orders and service item ediOrders:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,language=sh"
inline false
status open

\begin_layout Plain Layout

put bischeck.measured 1288946927 12000 host=erpserver service=orders serviceitem=
ediOrders
\end_layout

\begin_layout Plain Layout

put bischeck.threshold 1288946927 11000 host=erpserver service=orders serviceitem
=ediOrders
\end_layout

\begin_layout Plain Layout

put bischeck.warning 1288946927 9900 host=erpserver service=orders serviceitem=ed
iOrders
\end_layout

\begin_layout Plain Layout

put bischeck.critical 1288946927 7700 host=erpserver service=orders serviceitem=e
diOrders
\end_layout

\end_inset


\end_layout

\begin_layout Standard
So for each host, service and service item configuration 4 lines of data
 will be sent to the OpenTSDB server for the measured, threshold, warning
 and critical value.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
The configuration parameters that need to be define in the server.xml for
 OpenTSDB are:
\end_layout

\begin_layout Itemize
hostAddress - the IP or name for the OpenTSDB server, default is localhost.
\end_layout

\begin_layout Itemize
port - the socket port number on the OpenTSDB server where OpenTSDB is listening
, default is 4242.
\end_layout

\begin_layout Itemize
connectionTimeout - the timeout time in milliseconds before bischeck give
 up on the the connection, default is 5000.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:bischeck-configuration-files"

\end_inset

bischeck configuration files
\end_layout

\begin_layout Standard
The basic configuration file are xml based and located in the 
\emph on
$BISHOME/etc
\emph default
 directory.
 The distribution package also include all xml schema, xsd, files used for
 validation.
 For detail information please review the xsd files located in the directory
\emph on
 $BISHOME/resources
\emph default
.
 Remember that all xml configuration files should use HTML encoded characters.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "label:bischeck.xml"

\end_inset

bischeck.xml 
\end_layout

\begin_layout Standard
The bischeck configuration can be described as a hierarchy of hosts, services
 and service items to monitor.
 Each host can have one or more services, and for each service one or more
 service items can be configured.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=XML,numbers=right,tabsize=2"
inline false
status open

\begin_layout Plain Layout

<bischeck>
\end_layout

\begin_layout Plain Layout

	<host>
\end_layout

\begin_layout Plain Layout

		<name>erpserver</name>
\end_layout

\begin_layout Plain Layout

		<desc>ERP server</desc>
\end_layout

\begin_layout Plain Layout

		<service>
\end_layout

\begin_layout Plain Layout

			<name>orders</name> 
\end_layout

\begin_layout Plain Layout

			<desc>Order management</desc>
\end_layout

\begin_layout Plain Layout

			<schedule>0 0/5 * * * ?</schedule>
\end_layout

\begin_layout Plain Layout

			<url>
\end_layout

\begin_layout Plain Layout

				jdbc:mysql://erphost/erpdb?user=bischeck&amp;password=bischeck
\end_layout

\begin_layout Plain Layout

			</url>
\end_layout

\begin_layout Plain Layout

			<driver>
\end_layout

\begin_layout Plain Layout

				com.mysql.jdbc.Driver
\end_layout

\begin_layout Plain Layout

			</driver>
\end_layout

\begin_layout Plain Layout

			<serviceitem>
\end_layout

\begin_layout Plain Layout

				<name>ediorders</name>
\end_layout

\begin_layout Plain Layout

				<desc>Inbound edi orders</desc>
\end_layout

\begin_layout Plain Layout

				<execstatement>
\end_layout

\begin_layout Plain Layout

					select count(*) from orders where createdate=&apos;%%yyyy-MM-dd%%&apos;
\end_layout

\begin_layout Plain Layout

				</execstatement> 
\end_layout

\begin_layout Plain Layout

				<thresholdclass>
\end_layout

\begin_layout Plain Layout

					Twenty4HourThreshold
\end_layout

\begin_layout Plain Layout

				</thresholdclass>
\end_layout

\begin_layout Plain Layout

				<serviceitemclass>
\end_layout

\begin_layout Plain Layout

					SQLServiceItem
\end_layout

\begin_layout Plain Layout

				</serviceitemclass>
\end_layout

\begin_layout Plain Layout

			</serviceitem>
\end_layout

\begin_layout Plain Layout

		</service>
\end_layout

\begin_layout Plain Layout

	</host>
\end_layout

\begin_layout Plain Layout

</bischeck>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the host section the following elements are defined: 
\end_layout

\begin_layout Itemize
name - the name of the host.
 
\begin_inset Foot
status open

\begin_layout Plain Layout
Must be the same name as the host name is configured with on the Nagios
 server.
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
desc - a optional description field 
\end_layout

\begin_layout Standard
In the service section the following elements are defined: 
\end_layout

\begin_layout Itemize
name - name of the service.
 
\begin_inset Foot
status open

\begin_layout Plain Layout
Must be the same name as the host name is configured with on the Nagios
 server.
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
desc - a optional description field 
\end_layout

\begin_layout Itemize
schedule - one to many service execution schedules can be defined.
 See the section 
\begin_inset CommandInset ref
LatexCommand ref
reference "label:Service-scheduling"

\end_inset

 for more information about configuration options.
 
\end_layout

\begin_layout Itemize
sendserver - true or false to define if the service data should be sent
 to the configured monitoring servers, see 
\begin_inset CommandInset ref
LatexCommand ref
reference "label:server.xml"

\end_inset

.
 
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
[New in 0.4.0]
\end_layout

\end_inset

.
 If set to false the measured data will only be placed in the bischeck cache
 and be used to create virtual services and threshold rules.
\end_layout

\begin_layout Itemize
url - the connection specification for the server/service to monitor in
 a url format 
\end_layout

\begin_layout Itemize
driver - a class that is needed by the url specification.
 The driver class should be placed in the 
\emph on
customlib
\emph default
 directory.
 
\end_layout

\begin_layout Standard
In the service item section the following elements are defined:
\end_layout

\begin_layout Itemize
name - name of the service item
\end_layout

\begin_layout Itemize
desc - a optional description field
\end_layout

\begin_layout Itemize
execstatement - the specification of what to be executed by the service
 item.
 The statement will be dependent on the type of service item class used.
\end_layout

\begin_layout Itemize
serviceitemclass - the ServiceItem class to use for the service item.
 For ServiceItem classes that are part of the distribution the class name
 is enough.
 For custom developed ServiceItem classes the full class name should be
 specified and the classes or jar files should be located in the 
\emph on
customlib
\emph default
 directory.
\end_layout

\begin_layout Itemize
thresholdclass - the Threshold class to be used by the service item configuratio
n.
 For Threshold classes part of the distribution the class name is enough.
 For custom developed Threshold classes the full class name should be specified
 and the classes or jar files should be located in the 
\emph on
customlib
\emph default
 directory.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "label:properties.xml"

\end_inset

properties.xml
\end_layout

\begin_layout Standard
The properties.xml include properties used by the core of bischeck, but can
 also be used by custom developed services and threshold classes.
 The properties xml has a simple structure of key/value pair: 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=XML,numbers=right,tabsize=2"
inline false
status open

\begin_layout Plain Layout

<properties>
\end_layout

\begin_layout Plain Layout

	<property> 
\end_layout

\begin_layout Plain Layout

		<key>akey</key> 
\end_layout

\begin_layout Plain Layout

		<value>avalue</value> 
\end_layout

\begin_layout Plain Layout

	</property>
\end_layout

\begin_layout Plain Layout

</properties>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Any properties should have a default value that is set in code.
 The following properties are currently used by core bischeck:
\end_layout

\begin_layout Itemize
thresholdCacheClear- the time when the threshold cache should be evicted
 each day, default is "10 0 00 * * ? *".
 
\end_layout

\begin_layout Itemize
pidfile - the pid file for bischeck, default is "
\emph on
/var/tmp/bischeck.pid
\emph default
".
\end_layout

\begin_layout Itemize
mindaysinfirstweek - define the week numbering according to ISO 8601, default
 is 4.
\end_layout

\begin_layout Itemize
firstdayofweek - define the week numbering according to ISO 8601, default
 is 2.
 
\end_layout

\begin_layout Standard
The properties.xml file can also include class specific properties typical
 used for custom developed service, service item and threshold classes.
 A class specific property should have a key formatted in the following
 way - classname.propertyname 
\end_layout

\begin_layout Standard
Any class specific properties must have a default value implemented by the
 class itself.
 E.g.
 for JDBCService there is a property called querytimeout that sets the max
 time in seconds before aborting the query.
 This property has the name JDBCService.querytimeout and have a default value
 of 10 seconds.
 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "label:urlservice.xml"

\end_inset

urlservice.xml 
\end_layout

\begin_layout Standard
The configuration define of the mapping between service url schema and Service
 class.
 The urlservice xml has a structure of: 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=XML,numbers=right,tabsize=2"
inline false
status open

\begin_layout Plain Layout

<urlservices>
\end_layout

\begin_layout Plain Layout

	<urlproperty>
\end_layout

\begin_layout Plain Layout

		<key>jdbc</key>
\end_layout

\begin_layout Plain Layout

		<value>JDBCService</value>
\end_layout

\begin_layout Plain Layout

	</urlproperty>
\end_layout

\begin_layout Plain Layout

	<urlproperty>
\end_layout

\begin_layout Plain Layout

		<key>bischeck</key>
\end_layout

\begin_layout Plain Layout

		<value>LastCacheService</value>
\end_layout

\begin_layout Plain Layout

	</urlproperty>
\end_layout

\begin_layout Plain Layout

</urlservices>
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
key – the schema part of the service url, i.e.
 jdbc.
\end_layout

\begin_layout Itemize
value – the Service class name.
 For Service classes part of the distribution the class name is enough to
 specify.
 For custom developed Service classes the full class name should be specified
 and the classes or jar files should be located in the 
\emph on
customlib
\emph default
 directory.
\end_layout

\begin_layout Standard
Important is that the name field for host, service and service item are
 not allowed to include the dash (-) character.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "label:server.xml"

\end_inset

server.xml 
\end_layout

\begin_layout Standard
The configuration file define the mapping between service url schema and
 Server class.
 The urlservice.xml has a structure of: 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=XML,numbers=right,tabsize=2"
inline false
status open

\begin_layout Plain Layout

<servers>
\end_layout

\begin_layout Plain Layout

	<server name="Nagios1">     
\end_layout

\begin_layout Plain Layout

		<class>
\end_layout

\begin_layout Plain Layout

	    	com.ingby.socbox.bischeck.servers.NSCAServer     
\end_layout

\begin_layout Plain Layout

		</class>
\end_layout

\begin_layout Plain Layout

		<property>
\end_layout

\begin_layout Plain Layout

			<key>hostAddress</key>
\end_layout

\begin_layout Plain Layout

			<value>localhost</value>
\end_layout

\begin_layout Plain Layout

		</property>
\end_layout

\begin_layout Plain Layout

		<property>       
\end_layout

\begin_layout Plain Layout

			<key>encryptionMode</key>
\end_layout

\begin_layout Plain Layout

			<value>XOR</value>     
\end_layout

\begin_layout Plain Layout

		</property>
\end_layout

\begin_layout Plain Layout

		<property>
\end_layout

\begin_layout Plain Layout

			<key>password</key>       
\end_layout

\begin_layout Plain Layout

			<value>change this</value>     
\end_layout

\begin_layout Plain Layout

		</property>
\end_layout

\begin_layout Plain Layout

		<property>       
\end_layout

\begin_layout Plain Layout

			<key>port</key>       
\end_layout

\begin_layout Plain Layout

			<value>5667</value>     
\end_layout

\begin_layout Plain Layout

		</property>
\end_layout

\begin_layout Plain Layout

		<property>       
\end_layout

\begin_layout Plain Layout

			<key>connectionTimeout</key>       
\end_layout

\begin_layout Plain Layout

			<value>5000</value>     
\end_layout

\begin_layout Plain Layout

		</property> 
\end_layout

\begin_layout Plain Layout

	</server>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	<server name="Nagios2">     
\end_layout

\begin_layout Plain Layout

		......
\end_layout

\begin_layout Plain Layout

	</server>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

</servers>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Each server that is integrated with bischeck must be defined with the server
 tag and with a unique attribute name.
 This solution enable bischeck to send data to multiple servers of the same
 type, like multiple Nagios servers.
 The class tag define what Server class implementation to use for the integratio
n.
 Each Server implementation can have different numbers of properties that
 is specific for the Server class.
 Custom developed server classes should be placed in the 
\emph on
customlib
\emph default
 directory 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "label:24thresholds.xml"

\end_inset

24thresholds.xml
\end_layout

\begin_layout Standard
The threshold class Twenty4HourThreshold described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "label:Twenty4HourThreshold-class"

\end_inset

is configured through the 24thresholds.xml file.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},language=XML,numbers=right,tabsize=2"
inline false
status open

\begin_layout Plain Layout

<twenty4threshold> 
\end_layout

\begin_layout Plain Layout

	<servicedef>
\end_layout

\begin_layout Plain Layout

		<hostname>erpserver</hostname>
\end_layout

\begin_layout Plain Layout

		<servicename>shipments</servicename> 
\end_layout

\begin_layout Plain Layout

		<serviceitemname>outboundshipment</serviceitemname>
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		<period>
\end_layout

\begin_layout Plain Layout

			<!-- valid for any 21th day in the month -->
\end_layout

\begin_layout Plain Layout

			<months> 
\end_layout

\begin_layout Plain Layout

				<dayofmonth>21</dayofmonth> 
\end_layout

\begin_layout Plain Layout

			</months> 
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

			<!-- valid for week 12 (middle of March)
\end_layout

\begin_layout Plain Layout

				and if its a Thursday -->
\end_layout

\begin_layout Plain Layout

			<weeks> 
\end_layout

\begin_layout Plain Layout

				<week>12</week>
\end_layout

\begin_layout Plain Layout

				<dayofweek>5</dayofweek>
\end_layout

\begin_layout Plain Layout

			</weeks> 
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

			<calcmethod>&gt;</calcmethod> 
\end_layout

\begin_layout Plain Layout

			<warning>10</warning> 
\end_layout

\begin_layout Plain Layout

			<critical>30</critical> 
\end_layout

\begin_layout Plain Layout

			<hoursIDREF>1</hoursIDREF> 
\end_layout

\begin_layout Plain Layout

		</period>
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		<period>
\end_layout

\begin_layout Plain Layout

			<!-- valid if its a Friday --> 
\end_layout

\begin_layout Plain Layout

			<weeks> 
\end_layout

\begin_layout Plain Layout

				<dayofweek>6</dayofweek>
\end_layout

\begin_layout Plain Layout

			</weeks> 
\end_layout

\begin_layout Plain Layout

			<calcmethod>&gt;</calcmethod> 
\end_layout

\begin_layout Plain Layout

			<warning>10</warning> 
\end_layout

\begin_layout Plain Layout

			<critical>30</critical> 
\end_layout

\begin_layout Plain Layout

			<hoursIDREF>2</hoursIDREF> 
\end_layout

\begin_layout Plain Layout

		</period>
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		<period>
\end_layout

\begin_layout Plain Layout

			<!-- This will be used if no 
\end_layout

\begin_layout Plain Layout

				other rule if applicable -->
\end_layout

\begin_layout Plain Layout

			<calcmethod>&gt;</calcmethod>
\end_layout

\begin_layout Plain Layout

			<warning>10</warning> 
\end_layout

\begin_layout Plain Layout

			<critical>30</critical> 
\end_layout

\begin_layout Plain Layout

			<hoursIDREF>31</hoursIDREF> 
\end_layout

\begin_layout Plain Layout

		</period>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	</servicedef> 
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

	<hours hoursID="1"> 
\end_layout

\begin_layout Plain Layout

		<!-- 00:00 -->
\end_layout

\begin_layout Plain Layout

		<hour>500</hour> 
\end_layout

\begin_layout Plain Layout

		<!-- 01:00 -->	
\end_layout

\begin_layout Plain Layout

		<hour>1500</hour> 
\end_layout

\begin_layout Plain Layout

		<!-- 02:00 -->
\end_layout

\begin_layout Plain Layout

		<hour>4000</hour> 
\end_layout

\begin_layout Plain Layout

		.................
\end_layout

\begin_layout Plain Layout

		<!-- 21:00 -->
\end_layout

\begin_layout Plain Layout

		<hour>9000</hour> 
\end_layout

\begin_layout Plain Layout

		<!-- 22:00 -->
\end_layout

\begin_layout Plain Layout

		<hour>10000</hour> 
\end_layout

\begin_layout Plain Layout

		<!-- 23:00 -->
\end_layout

\begin_layout Plain Layout

		<hour>11000</hour> 
\end_layout

\begin_layout Plain Layout

	</hours>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	<hours hoursID="2"> 
\end_layout

\begin_layout Plain Layout

		<!-- 00:00 -->
\end_layout

\begin_layout Plain Layout

		<hour>1500</hour> 
\end_layout

\begin_layout Plain Layout

		<!-- 01:00 -->	
\end_layout

\begin_layout Plain Layout

		<hour>2500</hour> 
\end_layout

\begin_layout Plain Layout

		<!-- 02:00 -->
\end_layout

\begin_layout Plain Layout

		<hour>5000</hour> 
\end_layout

\begin_layout Plain Layout

		.................
\end_layout

\begin_layout Plain Layout

		<!-- 21:00 -->
\end_layout

\begin_layout Plain Layout

		<hour>10000</hour> 
\end_layout

\begin_layout Plain Layout

		<!-- 22:00 -->
\end_layout

\begin_layout Plain Layout

		<hour>12000</hour> 
\end_layout

\begin_layout Plain Layout

		<!-- 23:00 -->
\end_layout

\begin_layout Plain Layout

		<hour>14000</hour> 
\end_layout

\begin_layout Plain Layout

	</hours>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	<hours hoursID="2"> 
\end_layout

\begin_layout Plain Layout

		<!-- 00:00 -->
\end_layout

\begin_layout Plain Layout

		<hour>500</hour> 
\end_layout

\begin_layout Plain Layout

		<!-- 01:00 -->	
\end_layout

\begin_layout Plain Layout

		<hour>erpserver-orders-ediorders[0]*0.8</hour> 
\end_layout

\begin_layout Plain Layout

		<!-- 02:00 -->
\end_layout

\begin_layout Plain Layout

		<hour>erpserver-orders-ediorders[0]*0.8</hour> 
\end_layout

\begin_layout Plain Layout

		.................
\end_layout

\begin_layout Plain Layout

		<!-- 21:00 -->
\end_layout

\begin_layout Plain Layout

		<hour>erpserver-orders-ediorders[0]*0.3</hour> 
\end_layout

\begin_layout Plain Layout

		<!-- 22:00 -->
\end_layout

\begin_layout Plain Layout

		<hour>null</hour> 
\end_layout

\begin_layout Plain Layout

		<!-- 23:00 -->
\end_layout

\begin_layout Plain Layout

		<hour>null</hour> 
\end_layout

\begin_layout Plain Layout

	</hours> 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	<!-- Holidays -->
\end_layout

\begin_layout Plain Layout

	<holiday year="2011">
\end_layout

\begin_layout Plain Layout

		<dayofyear>0101</dayofyear>
\end_layout

\begin_layout Plain Layout

		.................
\end_layout

\begin_layout Plain Layout

		<dayofyear>1224</dayofyear>
\end_layout

\begin_layout Plain Layout

		<dayofyear>1225</dayofyear>
\end_layout

\begin_layout Plain Layout

	</holiday> 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

</twenty4threshold> 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The configuration is based on two main parts, a servicedef tag and an hours
 tag.
 For each combination of host, service and serviceitem a servicedef tag
 is specified.
 Each servicedef can have one to many period specifications, see 
\begin_inset CommandInset ref
LatexCommand ref
reference "label:Period-definition"

\end_inset

.
 The period specify what hoursID that should be used for a specific combination
 of months and weeks definitions, see 
\begin_inset CommandInset ref
LatexCommand ref
reference "label:Hours-definition"

\end_inset

for more information.
 The period also define calculation method, warning and critical level,
 see 
\begin_inset CommandInset ref
LatexCommand ref
reference "label:Calculation-definition"

\end_inset

.
\end_layout

\begin_layout Standard
The hours tag must have 24 hour tags, each represent on hour of the day.
 An hour tag can have a null value, meaning no threshold, a fixed value
 or an mathematical expression according to JEP, but with variables from
 any measured value existing in the last value cache, see 
\begin_inset CommandInset ref
LatexCommand ref
reference "label:Service-item-cache"

\end_inset

.
 For more information about threshold specifications please see 
\begin_inset CommandInset ref
LatexCommand ref
reference "label:Threshold-configuration"

\end_inset

.
 The final section, holidays, describe any day of the year where no threshold
 will be tested.
 For that reason the service will always return a OK state if bischeck services
 is ran and using the threshold class Twenty4HourThreshold.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:Service-scheduling"

\end_inset

Service scheduling 
\end_layout

\begin_layout Standard
The service scheduling define when a service is triggered to be executed.
 For each service there can be multiple scheduling configurations, but at
 lest one is mandatory.
 A scheduling can be described in two ways.
 The simple format describe a interval execution that are repeated forever.
 The format is just a number and a indicator defining the granularity in
 seconds (S), minutes (M) or hours (H).
 10M specify that the service should be executed every ten minutes.
 The second format is more advanced and follow the cron specification of
 Quartz, see 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.quartz-scheduler.org
\end_layout

\end_inset

.
 With this format its possible to define This could be like 
\emph on

\begin_inset Quotes eld
\end_inset

0 15 10 ? * MON-FRI
\begin_inset Quotes erd
\end_inset


\emph default
 which would schedule the service at 10:15am every Monday, Tuesday, Wednesday,
 Thursday and Friday.
 For more cron examples please visit 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.quartz-scheduler.org/documentation/quartz-2.x/tutorials/crontrigger
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:Configuration-tools"

\end_inset

Configuration tools 
\end_layout

\begin_layout Standard
Bischeck provides no additional tools for configuration other than the normal
 editor to manage the xml configuration files.
 The default configuration files in 
\emph on
etc
\emph default
 directory are valid for the test example configuration, see 
\begin_inset CommandInset ref
LatexCommand ref
reference "label:Getting-started"

\end_inset

.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:bischeck-internal-surveillance"

\end_inset

bischeck internal surveillance 
\end_layout

\begin_layout Standard
bischeck use the Java JMX standard for internal monitoring.
 Please read the javadoc for the classes ExecuteMBean and LastStatusCacheMBean
 to to understand the methods available or just start 
\emph on
jconsole
\emph default
 or equivalent tool.
 
\end_layout

\begin_layout Standard
The following JMX settings are used by default and set in the 
\emph on
bischeck
\emph default
 script located in the 
\emph on
$BISHOME/bin
\emph default
 directory.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline false
status open

\begin_layout Plain Layout

jmxport=-Dcom.sun.management.jmxremote.port=3333
\end_layout

\begin_layout Plain Layout

jmxssl=-Dcom.sun.management.jmxremote.ssl=false 
\end_layout

\begin_layout Plain Layout

jmxauth=-Dcom.sun.management.jmxremote.authenticate=false
\end_layout

\begin_layout Plain Layout

jmxpasswd=-Dcom.sun.management.jmxremote.password.file=$bishome/etc/jmxremote.password
\end_layout

\begin_layout Plain Layout

jmxaccess=-Dcom.sun.management.jmxremote.access.file=$bishome/etc/jmxremote.access
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If authentication should be used please change the property com.sun.management.jmxr
emote.authenticate to true and configure the roles and password in the files
 jmxremote.access and jmxremote.password.
 For more information how to configure JMX please visit 
\begin_inset CommandInset href
LatexCommand href
target "http://www.oracle.com/technetwork/java/javase/tech/javamanagement-140525.html"

\end_inset

.
\end_layout

\begin_layout Standard
JMX is only enabled when the 
\emph on
bischeck
\emph default
 script is called with the argument "
\emph on
Execute -d
\emph default
", which is the way 
\emph on
bischeckd
\emph default
 init script call the script 
\emph on
bischeck
\emph default
 to start bischeck in daemon mode.
 
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:Building-bischeck"

\end_inset

Building bischeck
\end_layout

\begin_layout Standard
To build bischeck from source is simple.
 Check out the bischeck trunk from gforge.ingby.com: 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=sh"
inline false
status open

\begin_layout Plain Layout

$ svn checkout --username anonymous http://gforge.ingby.com/svn/bischeck/trunk
 bischeck
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To build a bischeck distribution run from the directory where you checked
 out the bischeck code: 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},language=sh"
inline false
status open

\begin_layout Plain Layout

$ ant dist
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This will create a compressed tar file in the 
\shape italic
target
\shape default
 directory, named bischeck-x.y.z.tgz where x.y.z is the version number.
 Different versions of bischeck can be checked out from the tags directory
 located in 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://gforge.ingby.com/svn/bischeck/tags
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "label:Jar-customization"

\end_inset

Jar customization
\end_layout

\begin_layout Standard
To support custom jar files please place them in the directory 
\emph on
customlib
\emph default
.
 This would typical be jdbc drivers, custom threshold classes, etc.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "label:Developing-with-bischeck"

\end_inset

Developing with bischeck 
\end_layout

\begin_layout Standard
Its simple to develop your own service, service item and threshold classes.
 To develop your own you must follow the interface that exist for each type.
 For service and service items an abstract class exist with default implementati
on of most of the methods described in the interfaces.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:Installation"

\end_inset

Installation 
\end_layout

\begin_layout Standard
The latest binary version of bischeck is available on 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://gforge.ingby.com/gf/project/bischeck/frs
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Download the distribution file and follow the steps below to install.
 Make sure you have root privileges doing this.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=sh"
inline false
status open

\begin_layout Plain Layout

# tar xzvf bischeck-x.y.z.tgz 
\end_layout

\begin_layout Plain Layout

# cd bischeck-x.y.z
\end_layout

\begin_layout Plain Layout

# chmod 755 install 
\end_layout

\begin_layout Plain Layout

# ./install
\end_layout

\begin_layout Plain Layout

# service bischeckd start    #Redhat/Centos
\end_layout

\begin_layout Plain Layout

# /etc/init.d/bischeck start #Debian/Ubuntu
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To get full list of available options to the install script use -u.
 By default the 
\emph on
install
\emph default
 script will install bischeck in directory 
\emph on
/opt/socbox/addons/bischeck
\emph default
, referred to as 
\emph on
$BISHOME,
\emph default
 and with the ownership of the user id 
\emph on
nagios
\emph default
.
 Make sure that the user exist before running install.
\end_layout

\begin_layout Standard
The last commands start the bischeck daemon with the effective user id of
 the user id set during install, default user 
\emph on
nagios
\emph default
.
 The installation will configure bischeckd to start automatically in run
 level 3, 4 and 5.
\end_layout

\begin_layout Standard
The process id of the java process running bischeck in daemon mode is located
 in a file, default in 
\emph on
/var/tmp/bischeck.pid
\emph default
.
 This file is used by the bischeckd script to stop the java program running
 bischeck and make sure that only one instance of bischeck is started on
 the server.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "label:Upgrading"

\end_inset

Upgrading
\end_layout

\begin_layout Standard
From version 0.3.2 upgrading is possible.
 If you already have an installation download the new version as described
 in the previous chapter but to upgrade run: 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=sh"
inline false
status open

\begin_layout Plain Layout

# ./install -I /opt/socbox/addons/bischeck -X
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The upgrade will save the current installation in a directory parallel to
 the new version named 
\emph on
bischeck_x.y.z
\emph default
, where x.y.z is the version of the old installation.
\end_layout

\begin_layout Standard
The file 
\emph on
migrationpath.txt
\emph default
 describe the supported upgrade paths and what migration scripts that will
 be run by the 
\emph on
install
\emph default
 script when running in upgrade mode, -X.
\end_layout

\begin_layout Standard
If the upgrade is successful bischeck can be started.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=sh"
inline false
status open

\begin_layout Plain Layout

# service bischeckd start
\end_layout

\end_inset

 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "label:Getting-started"

\end_inset

Getting started
\end_layout

\begin_layout Standard
In the 
\emph on
$BISHOME/etc
\emph default
 directory there are examples of all the configuration files.
 These works as an examples to get started with a simple bischeck setup
 of monitoring a Mysql database table.
 Scripts to create the test database is found in the examples directory.
 You do not need a nagios server setup to run the test, just monitor the
 bischeck log file located by default in 
\emph on
/usr/tmp/bischeck.log
\emph default
.
 To run the example the mysql jdbc driver is required and the jar file,
 typical 
\emph on
mysql-connector-java.jar
\emph default
 should be copied to the 
\emph on
$BISHOME/customlib
\emph default
 directory to automatically be part of bischecks classpath.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},language=sh,tabsize=4"
inline false
status open

\begin_layout Plain Layout

$ cd $BISHOME
\end_layout

\begin_layout Plain Layout

$ cat examples/create_bischeckverify.sql | mysql -u root
\end_layout

\begin_layout Plain Layout

$ cp <some location>/mysql-connector-java.jar customlib/
\end_layout

\begin_layout Plain Layout

$ sudo /etc/init.d/bischeckd restart
\end_layout

\begin_layout Plain Layout

$ tail -f /usr/tmp/bischeck.log
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "label:Integration-with-pnp4nagios"

\end_inset

Integration with pnp4nagios
\end_layout

\begin_layout Standard
pnp4nagios can create graph layouts depending on the check command used
 for the service on the Nagios server.
 Since bischeck use a passive check we need to create a unique check command
 that match the pnp4nagios layout for bischeck.
 Create a link in the 
\emph on
libexec
\emph default
 directory on the nagios server:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},language=sh"
inline false
status open

\begin_layout Plain Layout

nagios$ ln -s check_dummy check_bischeck
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When describing the service always use the check_bischeck as the check command.
 The 
\emph on
check_bischeck.php
\emph default
 that control the pnp4nagios layout must be copied to the directory 
\emph on
pnp4nagios/share/templates
\emph default
 on the Nagios server.
 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "label:Logging"

\end_inset

Logging
\end_layout

\begin_layout Standard
bischeck use log4j for log management.
 The log4j configuration is described in the log4.properties file located
 in the 
\emph on
resources
\emph default
 directory of the bischeck installation.
 By default bischeck writes log information at level INFO to file 
\emph on
/var/tmp/bischeck.log
\emph default
.
 
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:Command-line-utilities"

\end_inset

Command line utilities
\end_layout

\begin_layout Standard
There is a number of command line utilities available in bischeck.
 All can be ran through the 
\emph on
bischeck 
\emph default
script located in the 
\emph on
$BISHOME/bin
\emph default
 directory.
 To use the bischeck script add it to your PATH variable.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=sh"
inline false
status open

\begin_layout Plain Layout

$ PATH=$BISHOME/bin:$PATH
\end_layout

\end_inset


\end_layout

\begin_layout Section
Run bischeck
\end_layout

\begin_layout Standard
The normal way to run bischeck is as a daemon using the init.d script 
\emph on
bischeckd
\emph default
, but is also possible to start bischeck in continues running mode by executing:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=sh"
inline false
status open

\begin_layout Plain Layout

$ bischeck Execute -d
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Running in this way have limitations since the execution will not automatically
 be placed as a background process and the effective user id will be the
 user starting the process which may not have all permissions according
 to the installation.
 Neither will pid files be updated correctly.
 For production system always use the init.d script.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=sh"
inline false
status open

\begin_layout Plain Layout

$ sudo /etc/init.d/bischeckd start
\end_layout

\end_inset


\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=sh"
inline false
status open

\begin_layout Plain Layout

# service bischeckd start
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For testing purpose it can be good to just run bischeck once and make sure
 that every thing is executing as expected.
 This is done by executing:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=sh"
inline false
status open

\begin_layout Plain Layout

$ bischeck Execute
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This will override all scheduling definitions and execute everything directly,
 but only once.
 
\end_layout

\begin_layout Standard
To show the pid file used for the bischeck daemon running:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=sh"
inline false
status open

\begin_layout Plain Layout

$ bischeck ConfigurationManager -p
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This command is used in the init script bischeckd to retrieve the current
 pid.
\end_layout

\begin_layout Section
List bischeck configuration
\end_layout

\begin_layout Standard
Formatted listing of all configuration files is managed by the DocManager
 class.
 
\end_layout

\begin_layout Standard
To generate the configuration files in html format:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=sh"
inline false
status open

\begin_layout Plain Layout

$ bischeck DocManager -d <directory name> -t html
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The files are generated to the directory set with -d.
 Point your browser to the index.html file in the directory to get links
 to each configuration file.
\end_layout

\begin_layout Standard
To get the same but in plain text:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=sh"
inline false
status open

\begin_layout Plain Layout

$ bischeck DocManager -d <directory name> -t text
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If -d is omitted the files file be created in the default directory 
\emph on
bisheckdoc
\emph default
.
 The default value for -t is html.
\end_layout

\begin_layout Section
Validating configuration files
\end_layout

\begin_layout Standard
To validate if the xml configuration files are correct the following command
 will return 0 if correct.
 Use $? to see return status.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=sh"
inline false
status open

\begin_layout Plain Layout

$ bischeck ConfigurationManager -v; echo $?
\end_layout

\end_inset


\end_layout

\begin_layout Section
Twenty4HourThreshold testing
\end_layout

\begin_layout Standard
To verify which threshold rule that will used for a specific host, service
 and service item for a specific date run:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=sh"
inline false
status open

\begin_layout Plain Layout

$ bischeck threshold.Twenty4HourThreshold -h erphost -s orders -i ediorders
 -d 20111207
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The above command will show which threshold definition that will be used
 for host erphost, service orders and serviceitem ediorders on seventh of
 December 2012.
 If -d is omitted the current date will be used.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:Releases"

\end_inset

Releases
\end_layout

\begin_layout Section
Release 0.4.0 - 2012-xx-xx
\end_layout

\begin_layout Subsection
New feature
\end_layout

\begin_layout Itemize
[FR-197] Support for different and multiple integration with different surveilla
nce and monitoring systems.
 With version 0.4.0 bischeck is not limited to send data to Nagios.
 It can now send the data to multiple Nagios servers and to other servers
 like OpenTSB.
 This is done by moving server formatting and protocol to server integration
 classes that implements the interface com.ingby.socbox.bischeck.servers.Server.
 The server integration is described in the xml configuration file servers.xml.
 This also means that that some Nagios NSCA specific properties previous
 configured in properties.xml has been moved to the servers.xml file in the
 NSCA section.
 The OpenTSDB server class should be regarded as beta.
\end_layout

\begin_layout Itemize
[FR-202] The implementation of running bischeck once, in a none daemon mode,
 is changed so the same code is used as running in daemon mode.
 The only difference is that the initialization of triggers are different
 so all service items are just ran directly and and just once.
 
\end_layout

\begin_layout Itemize
[FR-218] The bischeck daemon can now reload the configuration without a
 process restart.
 This is support through the JMX operation 
\begin_inset Quotes eld
\end_inset

reload
\begin_inset Quotes erd
\end_inset

.
 The feature will limit the need of operating system access and authorization.
\end_layout

\begin_layout Itemize
[FR-219] Bischeck can now retrieve state and performance data from a Nagios
 server supporting livestatus.
 With the service class LivestatusService a connection is set up over livestatus
 and with the and serviceitem class LivestatusServiceItem state and/or performan
ce data can be retrieved from the a Nagios service.
 This can be useful when when creating virtual services in bischeck or used
 in complex thresholds.
 
\end_layout

\begin_layout Itemize
Added support for other Linux distributions then Redhat based.
 bischeck should now install on Debian 6 and Ubuntu 10/11.
 
\end_layout

\begin_layout Itemize
Configuration listing.
 The configuration listing has been moved from the ConfigurationManager
 class to the DocManager class.
 Currently html and text listing is supported.
 The generated configuration data will by default placed in the 
\emph on
bischeckdoc
\emph default
 directory.
 
\end_layout

\begin_layout Itemize
A configured service can be configured not to send its data to a the configured
 monitoring servers like Nagios.
 This can be useful if the service is just to be used to create virtual
 services or just to be used as thresholds.
 
\end_layout

\begin_layout Itemize
The bischeck script now support JMX authentication.
 The authentication files are located in the etc directory and named jmxremote.pa
ssword and jmxremote.access.
 Default is to that authentication is disabled by the system property 
\begin_inset Quotes eld
\end_inset

-Dcom.sun.management.jmxremote.authenticate=false
\begin_inset Quotes erd
\end_inset

.
 To enable authentication set the property to true.
 For more info about JMX see 
\begin_inset CommandInset href
LatexCommand href
target "http://www.oracle.com/technetwork/java/javase/tech/javamanagement-140525.html"

\end_inset

.
\end_layout

\begin_layout Subsection
Bugs fixed and important issues
\end_layout

\begin_layout Itemize
The Service interface has a number of new methods that should been there
 from the beginning.
 If you developed any service class you need to add these, but if you just
 inherited ServiceAbstract its fixed for you.
 The new methods are:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},language=sh,tabsize=4"
inline false
status open

\begin_layout Plain Layout

public NAGIOSSTAT getLevel(); 
\end_layout

\begin_layout Plain Layout

public void setLevel(NAGIOSSTAT level); 
\end_layout

\begin_layout Plain Layout

public boolean isConnectionEstablished(); 
\end_layout

\begin_layout Plain Layout

public void setConnectionEstablished(boolean connected); 
\end_layout

\begin_layout Plain Layout

public Boolean isSendServiceData(); 
\end_layout

\begin_layout Plain Layout

public setSendServiceData(Boolean sendServiceData);
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Property 
\emph on
cacheclear
\emph default
 is renamed to 
\emph on
thresholdCacheClear
\emph default
.
\end_layout

\begin_layout Itemize
All the nsca related properties has been moved from properties.xml to servers.xml
 when used for the NSCAServer class.
 The new property names has also gone through some minor changes.
 When upgrading a manual update is needed of the servers.xml file with the
 current setting of nsca related properties in properties.xml.
 Recommended that these are later removed.
\end_layout

\begin_layout Itemize
All JAXB generated configuration classes now support serialization.
 
\end_layout

\begin_layout Itemize
[TR-216] 
\begin_inset Quotes eld
\end_inset

Shutdown is automatic triggered
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
[TR-217] 
\begin_inset Quotes eld
\end_inset

Configuration Manager initialization failed with java.lang.NullPointerException
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
[TR-207] sudo in bischeckd script cause problem at boot
\end_layout

\begin_layout Subsection
Upgrading
\end_layout

\begin_layout Standard
Release 0.3.3 is supported for upgrade to 0.4.0.
\end_layout

\begin_layout Section
Release 0.3.3 - 2011-11-14
\end_layout

\begin_layout Subsection
New features
\end_layout

\begin_layout Itemize
bischeck are no longer limited to just be integrated with a single Nagios
 server over the NSCA protocol.
 Now is it possible to integrate with multiple monitoring servers over different
 protocols.
 Currently Nagios/NSCA and OpenTSDB is support.
 To enable this a new class component called Server has been introduced.
 The class is responsible for communication and formatting for the specific
 monitoring server it integrate against.
 A new configuration file, server.xml is used for configuration of server
 integration.
\end_layout

\begin_layout Subsection
Bugs fixed and important issues
\end_layout

\begin_layout Itemize
[TR-207] 
\begin_inset Quotes eld
\end_inset

sudo in bischeckd script cause problem at boot
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
[TR-214] 
\begin_inset Quotes eld
\end_inset

Threshold object cache is no cleared
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Section
Release 0.3.2 - 2011-07-29
\end_layout

\begin_layout Subsection
New features
\end_layout

\begin_layout Itemize
The configuration system has been completely rewritten and now us xml based
 configuration files.
 Each configuration file has a corresponding xsd file that can be used for
 verifications.
 The dependencies to sqlite3 has been deprecated and is just part of this
 release to support upgrade.
 
\end_layout

\begin_layout Itemize
The scheduling of services and its related serviceitem(s) has been rewritten
 to support different scheduling polices per service instead of earlier
 versions of fixed interval scheduling.
 With 0.3.2 each service can have one to many schedule tags in bischeck.xml
 configuration file.
 For more info please see the chapter 
\begin_inset CommandInset ref
LatexCommand vref
reference "label:Service-scheduling"

\end_inset

.
 
\end_layout

\begin_layout Subsection
Bugs fixed and important issues
\end_layout

\begin_layout Itemize
The active attribute on Hosts, Services and Serviceitem has been removed.
\end_layout

\begin_layout Itemize
The interface com.ingby.socbox.bischeck.threshold.Threshold has a new signature
 on the method init().
 This method now throws Exception.
 
\end_layout

\begin_layout Itemize
The Service interface has two additional methods, setSchedules() and getSchedule
s().
 
\end_layout

\begin_layout Itemize
The Service interface has changed the signature of getServicesItems() to
 return Map instead of HashMap.
 
\end_layout

\begin_layout Itemize
buildr has been replaced by ant as the build management system.
\end_layout

\begin_layout Section
Release 0.3.1 - 2011-04-08 
\end_layout

\begin_layout Subsection
New features
\end_layout

\begin_layout Itemize
The ServiceFactory class now use a property table, urlservice, to map what
 Service class should be instantiate for a specific url schema.
 The url schema is the key.
 The current default mapping are: 
\end_layout

\begin_deeper
\begin_layout Itemize
jdbc -> JDBCService 
\end_layout

\begin_layout Itemize
bischeck -> LastCacheService
\end_layout

\end_deeper
\begin_layout Itemize
The ServiceItemFactory class use an additional field, serviceitemclass,
 in the items configuration table to determine what ServiceItem class to
 instantiate.
\end_layout

\begin_layout Itemize
Calendar in bischeck follows the ISO 8601 date standard by default.
 This means that the first day in the week is Monday, day 2 according to
 java.utilCalendar, and that the first week of the year must have a minimum
 of 4 days.
 The importance of this is to get the week numbering correct that is used
 in the configuration in Twenty4HourThreshold class, but day one (1) in
 the week is still Sunday when defining the tag dayofweek in 24threshols.xml.
 The setting can be overidden by setting the properties 
\begin_inset Quotes eld
\end_inset


\emph on
mindaysinfirstweek
\emph default

\begin_inset Quotes erd
\end_inset

 (default 4) and 
\begin_inset Quotes eld
\end_inset


\emph on
firstdayofweek
\emph default

\begin_inset Quotes erd
\end_inset

 (default 2) in the properties.xml file.
 
\end_layout

\begin_layout Itemize
If no threshold class has been specified, null in the thresholdclass field
 in the items table, bischeck will instantiate the “empty” class DummyThreshold.
\end_layout

\begin_layout Itemize
For all class configuration of Service, ServiceItem and Threshold its now
 possible to specify the class name without the package path if the class
 is part of the bischeck distribution.
 
\end_layout

\begin_layout Itemize
Clean up of the exception handling process when starting bischeck.
 Now the execution should not start if there are configuration issues with
 missing classes for Service, ServiceItem and Threshold.
 
\end_layout

\begin_layout Subsection
Bugs fixed and important issues 
\end_layout

\begin_layout Itemize
N/A
\end_layout

\begin_layout Subsection
Upgrade issues 
\end_layout

\begin_layout Itemize
Upgrade by doing a fresh installation, but first save the old installation
 directory.
 After saving the old installation do a new install.
 Then copy the files bischeck.conf and 24threshold.conf from old to new installati
on dir.
\end_layout

\begin_layout Itemize
The field serviceitemclass (varchar(256)) in table items in configuration
 database bischeck.conf must be manual added and populated with the right
 Service class name.
 If corresponding service is jdbc:// set the field serviceitemclass to SQLServic
eItem and if the service is bischeck:// set the field to CalculateOnCache.
\end_layout

\begin_layout Itemize
To add the column:
\begin_inset Newline newline
\end_inset

 
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,language=sh"
inline false
status open

\begin_layout Plain Layout

$ sqlite3 bischeck.conf sqlite> ALTER TABLE items ADD COLUMN serviceitemclass
 varchar(256);
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Update the serviceitemclass for all rows in items: 
\end_layout

\begin_deeper
\begin_layout Itemize
sqlite> update items set serviceitemclass='SQLServiceItem' where ....
 ....
 
\end_layout

\begin_layout Itemize
sqlite> update items set serviceitemclass='CalculateOnCache' where .....
 ....
\end_layout

\end_deeper
\begin_layout Itemize
Add the new table url2service in database bischeck.conf.
\begin_inset Newline newline
\end_inset


\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

$ cat << EOF | sqlite3 bischeck.conf 
\end_layout

\begin_layout Plain Layout

drop table IF EXISTS urlservice; 
\end_layout

\begin_layout Plain Layout

create table urlservice(key varchar(128), value varchar(256)); 
\end_layout

\begin_layout Plain Layout

insert into urlservice values ("jdbc","JDBCService"); 
\end_layout

\begin_layout Plain Layout

insert into urlservice values ("bischeck","LastCacheService"); 
\end_layout

\begin_layout Plain Layout

EOF
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Copy all file located in the old installation customlib directory to the
 customlib directory in the new installation.
\end_layout

\begin_layout Section
Release 0.3.0 - 2011-03-03 
\end_layout

\begin_layout Subsection
New features 
\end_layout

\begin_layout Itemize
This is the first binary distribution, but should be regarded as a beta
 version.
 
\end_layout

\begin_layout Subsection
Bugs fixed and important issues
\end_layout

\begin_layout Itemize
N/A
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:System-requirements"

\end_inset

System requirements
\end_layout

\begin_layout Standard
bischeck should run on any operating system that supports Java.
 bischeck has been with Java 6.
 The installation script and init scripts are supported on Redhat and Debian
 equivalent Linux distributions.
 Running on none Linux operating system has not been tested.
\end_layout

\begin_layout Standard
The following jar packages are distributed as part of the bischeck distribution.
 All these packages have their own open source licenses.
 
\end_layout

\begin_layout Itemize
commons-lang-2.5.jar - 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://commons.apache.org/lang/
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.apache.org/licenses/LICENSE-2.0.html
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Itemize
commons-cli-1.2.jar - 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://commons.apache.org/cli/
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.apache.org/licenses/LICENSE-2.0.html
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Itemize
log4j-1.2.16.jar - 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://logging.apache.org/log4j/ Apache project
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.apache.org/licenses/LICENSE-2.0.html
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Itemize
quartz-2.0.1.jar - 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.quartz-scheduler.org/
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.apache.org/licenses/LICENSE-2.0.html
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Itemize
jsendnsca-2.0.1.jar - 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://code.google.com/p/jsendnsca/
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.apache.org/licenses/LICENSE-2.0.html
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Itemize
slf4j-api-1.6.0.jar - 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.slf4j.org/
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.opensource.org/licenses/mit-license.php
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
slf4j-log4j12-1.6.0.jar - 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.slf4j.org/
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.opensource.org/licenses/mit-license.php
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
jep-2.3.1.jar - 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://sourceforge.net/projects/jep/
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.gnu.org/licenses/gpl-2.0.html
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
json-lib-2.4 - 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://json-lib.sourceforge.net/
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.apache.org/licenses/LICENSE-2.0.html
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
ezmorph-1.0.6.jar - 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://ezmorph.sourceforge.net/
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.apache.org/licenses/LICENSE-2.0.html
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
commons-beanutils-1.8.3.jar - 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://commons.apache.org/beanutils/
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.apache.org/licenses/LICENSE-2.0.html
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
commons-collections-3.2.1.jar - 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://commons.apache.org/collections/
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.apache.org/licenses/LICENSE-2.0.html
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
All jar files distributed as part of bischeck are located in the lib directory.
 
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:bischeck-license"

\end_inset

bischeck license 
\end_layout

\begin_layout Standard
bischeck is licensed under GNU license version 2.
 For more info please visit 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.gnu.org/licenses/gpl-2.0.htm
\end_layout

\end_inset

l
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "label:Credits"

\end_inset

Credits
\end_layout

\begin_layout Standard
Thanks to all people who has developed all the great software that bischeck
 depends on, and especially all who made Nagios and the Nagios community
 a success.
\end_layout

\begin_layout Standard
A special thanks goes to Peter Johansson and his colleagues at DHL Freight
 Sweden for sponsoring the development and providing ideas and important
 feedback.
 
\end_layout

\end_body
\end_document
